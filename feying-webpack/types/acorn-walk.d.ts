/** Declaration file generated by dts-gen */

export function ancestor(node: any, visitors: any, baseVisitor: any, state: any): void;

export function findNodeAfter(node: any, pos: any, test: any, baseVisitor: any, state: any): any;

export function findNodeAround(node: any, pos: any, test: any, baseVisitor: any, state: any): any;

export function findNodeAt(node: any, start: any, end: any, test: any, baseVisitor: any, state: any): any;

export function findNodeBefore(node: any, pos: any, test: any, baseVisitor: any, state: any): any;

export function full(node: any, callback: any, baseVisitor: any, state: any, override: any): void;

export function fullAncestor(node: any, callback: any, baseVisitor: any, state: any): void;

export function make(funcs: any, baseVisitor: any): any;

export function recursive(node: any, state: any, funcs: any, baseVisitor: any, override: any): void;

export function simple(node: any, visitors: any, baseVisitor: any, state: any, override: any): void;

export namespace ancestor {
    const prototype: {
    };

}

export namespace base {
    function ArrayExpression(node: any, st: any, c: any): void;

    function ArrayPattern(node: any, st: any, c: any): void;

    function ArrowFunctionExpression(node: any, st: any, c: any): any;

    function AssignmentExpression(node: any, st: any, c: any): void;

    function AssignmentPattern(node: any, st: any, c: any): void;

    function AwaitExpression(node: any, st: any, c: any): void;

    function BinaryExpression(node: any, st: any, c: any): void;

    function BlockStatement(node: any, st: any, c: any): void;

    function BreakStatement(_node: any, _st: any, _c: any): void;

    function CallExpression(node: any, st: any, c: any, ...args: any[]): void;

    function CatchClause(node: any, st: any, c: any): void;

    function Class(node: any, st: any, c: any): void;

    function ClassBody(node: any, st: any, c: any): void;

    function ClassDeclaration(node: any, st: any, c: any): any;

    function ClassExpression(node: any, st: any, c: any): any;

    function ConditionalExpression(node: any, st: any, c: any): void;

    function ContinueStatement(_node: any, _st: any, _c: any): void;

    function DebuggerStatement(_node: any, _st: any, _c: any): void;

    function DoWhileStatement(node: any, st: any, c: any): void;

    function EmptyStatement(_node: any, _st: any, _c: any): void;

    function ExportAllDeclaration(node: any, st: any, c: any): void;

    function ExportDefaultDeclaration(node: any, st: any, c: any): void;

    function ExportNamedDeclaration(node: any, st: any, c: any): void;

    function Expression(node: any, st: any, c: any): void;

    function ExpressionStatement(node: any, st: any, c: any): any;

    function ForInStatement(node: any, st: any, c: any): void;

    function ForInit(node: any, st: any, c: any): void;

    function ForOfStatement(node: any, st: any, c: any): void;

    function ForStatement(node: any, st: any, c: any): void;

    function Function(node: any, st: any, c: any): void;

    function FunctionDeclaration(node: any, st: any, c: any): any;

    function FunctionExpression(node: any, st: any, c: any): any;

    function Identifier(_node: any, _st: any, _c: any): void;

    function IfStatement(node: any, st: any, c: any): void;

    function ImportDeclaration(node: any, st: any, c: any): void;

    function ImportDefaultSpecifier(_node: any, _st: any, _c: any): void;

    function ImportNamespaceSpecifier(_node: any, _st: any, _c: any): void;

    function ImportSpecifier(_node: any, _st: any, _c: any): void;

    function LabeledStatement(node: any, st: any, c: any): any;

    function Literal(_node: any, _st: any, _c: any): void;

    function LogicalExpression(node: any, st: any, c: any): void;

    function MemberExpression(node: any, st: any, c: any): void;

    function MemberPattern(node: any, st: any, c: any): void;

    function MetaProperty(_node: any, _st: any, _c: any): void;

    function MethodDefinition(node: any, st: any, c: any): void;

    function NewExpression(node: any, st: any, c: any, ...args: any[]): void;

    function ObjectExpression(node: any, st: any, c: any): void;

    function ObjectPattern(node: any, st: any, c: any): void;

    function ParenthesizedExpression(node: any, st: any, c: any): any;

    function Pattern(node: any, st: any, c: any): void;

    function Program(node: any, st: any, c: any): void;

    function Property(node: any, st: any, c: any): void;

    function RestElement(node: any, st: any, c: any): any;

    function ReturnStatement(node: any, st: any, c: any): void;

    function SequenceExpression(node: any, st: any, c: any): void;

    function SpreadElement(node: any, st: any, c: any): any;

    function Statement(node: any, st: any, c: any): void;

    function Super(_node: any, _st: any, _c: any): void;

    function SwitchCase(node: any, st: any, c: any): void;

    function SwitchStatement(node: any, st: any, c: any): void;

    function TaggedTemplateExpression(node: any, st: any, c: any): void;

    function TemplateElement(_node: any, _st: any, _c: any): void;

    function TemplateLiteral(node: any, st: any, c: any): void;

    function ThisExpression(_node: any, _st: any, _c: any): void;

    function ThrowStatement(node: any, st: any, c: any): any;

    function TryStatement(node: any, st: any, c: any): void;

    function UnaryExpression(node: any, st: any, c: any): void;

    function UpdateExpression(node: any, st: any, c: any): void;

    function VariableDeclaration(node: any, st: any, c: any): void;

    function VariableDeclarator(node: any, st: any, c: any): void;

    function VariablePattern(_node: any, _st: any, _c: any): void;

    function WhileStatement(node: any, st: any, c: any): void;

    function WithStatement(node: any, st: any, c: any): void;

    function YieldExpression(node: any, st: any, c: any): void;

    namespace ArrayExpression {
        const prototype: {
        };

    }

    namespace ArrayPattern {
        const prototype: {
        };

    }

    namespace ArrowFunctionExpression {
        const prototype: {
        };

    }

    namespace AssignmentExpression {
        const prototype: {
        };

    }

    namespace AssignmentPattern {
        const prototype: {
        };

    }

    namespace AwaitExpression {
        const prototype: {
        };

    }

    namespace BinaryExpression {
        const prototype: {
        };

    }

    namespace BlockStatement {
        const prototype: {
        };

    }

    namespace BreakStatement {
        const prototype: {
        };

    }

    namespace CallExpression {
        const prototype: {
        };

    }

    namespace CatchClause {
        const prototype: {
        };

    }

    namespace Class {
        const prototype: {
        };

    }

    namespace ClassBody {
        const prototype: {
        };

    }

    namespace ClassDeclaration {
        const prototype: {
        };

    }

    namespace ClassExpression {
        const prototype: {
        };

    }

    namespace ConditionalExpression {
        const prototype: {
        };

    }

    namespace ContinueStatement {
        const prototype: {
        };

    }

    namespace DebuggerStatement {
        const prototype: {
        };

    }

    namespace DoWhileStatement {
        const prototype: {
        };

    }

    namespace EmptyStatement {
        const prototype: {
        };

    }

    namespace ExportAllDeclaration {
        const prototype: {
        };

    }

    namespace ExportDefaultDeclaration {
        const prototype: {
        };

    }

    namespace ExportNamedDeclaration {
        const prototype: {
        };

    }

    namespace Expression {
        const prototype: {
        };

    }

    namespace ExpressionStatement {
        const prototype: {
        };

    }

    namespace ForInStatement {
        const prototype: {
        };

    }

    namespace ForInit {
        const prototype: {
        };

    }

    namespace ForOfStatement {
        const prototype: {
        };

    }

    namespace ForStatement {
        const prototype: {
        };

    }

    namespace Function {
        const prototype: {
        };

    }

    namespace FunctionDeclaration {
        const prototype: {
        };

    }

    namespace FunctionExpression {
        const prototype: {
        };

    }

    namespace Identifier {
        const prototype: {
        };

    }

    namespace IfStatement {
        const prototype: {
        };

    }

    namespace ImportDeclaration {
        const prototype: {
        };

    }

    namespace ImportDefaultSpecifier {
        const prototype: {
        };

    }

    namespace ImportNamespaceSpecifier {
        const prototype: {
        };

    }

    namespace ImportSpecifier {
        const prototype: {
        };

    }

    namespace LabeledStatement {
        const prototype: {
        };

    }

    namespace Literal {
        const prototype: {
        };

    }

    namespace LogicalExpression {
        const prototype: {
        };

    }

    namespace MemberExpression {
        const prototype: {
        };

    }

    namespace MemberPattern {
        const prototype: {
        };

    }

    namespace MetaProperty {
        const prototype: {
        };

    }

    namespace MethodDefinition {
        const prototype: {
        };

    }

    namespace NewExpression {
        const prototype: {
        };

    }

    namespace ObjectExpression {
        const prototype: {
        };

    }

    namespace ObjectPattern {
        const prototype: {
        };

    }

    namespace ParenthesizedExpression {
        const prototype: {
        };

    }

    namespace Pattern {
        const prototype: {
        };

    }

    namespace Program {
        const prototype: {
        };

    }

    namespace Property {
        const prototype: {
        };

    }

    namespace RestElement {
        const prototype: {
        };

    }

    namespace ReturnStatement {
        const prototype: {
        };

    }

    namespace SequenceExpression {
        const prototype: {
        };

    }

    namespace SpreadElement {
        const prototype: {
        };

    }

    namespace Statement {
        const prototype: {
        };

    }

    namespace Super {
        const prototype: {
        };

    }

    namespace SwitchCase {
        const prototype: {
        };

    }

    namespace SwitchStatement {
        const prototype: {
        };

    }

    namespace TaggedTemplateExpression {
        const prototype: {
        };

    }

    namespace TemplateElement {
        const prototype: {
        };

    }

    namespace TemplateLiteral {
        const prototype: {
        };

    }

    namespace ThisExpression {
        const prototype: {
        };

    }

    namespace ThrowStatement {
        const prototype: {
        };

    }

    namespace TryStatement {
        const prototype: {
        };

    }

    namespace UnaryExpression {
        const prototype: {
        };

    }

    namespace UpdateExpression {
        const prototype: {
        };

    }

    namespace VariableDeclaration {
        const prototype: {
        };

    }

    namespace VariableDeclarator {
        const prototype: {
        };

    }

    namespace VariablePattern {
        const prototype: {
        };

    }

    namespace WhileStatement {
        const prototype: {
        };

    }

    namespace WithStatement {
        const prototype: {
        };

    }

    namespace YieldExpression {
        const prototype: {
        };

    }

}

export namespace findNodeAfter {
    const prototype: {
    };

}

export namespace findNodeAround {
    const prototype: {
    };

}

export namespace findNodeAt {
    const prototype: {
    };

}

export namespace findNodeBefore {
    const prototype: {
    };

}

export namespace full {
    const prototype: {
    };

}

export namespace fullAncestor {
    const prototype: {
    };

}

export namespace make {
    const prototype: {
    };

}

export namespace recursive {
    const prototype: {
    };

}

export namespace simple {
    const prototype: {
    };

}

